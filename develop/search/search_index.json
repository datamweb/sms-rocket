{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>test pull</p>"},{"location":"#codeigniter4-smsrocket","title":"CodeIgniter4 SMSRocket","text":"<p>The CodeIgniter 4 SMSRocket package was developed to tackle recurring issues with SMS integration across various CodeIgniter 4 projects. Having personally encountered these challenges in multiple projects, I created this package to offer a structured and unified solution. SMSRocket includes features such as support for multiple drivers, automatic user phone detection for seamless integration with CodeIgniter Shield, caching, retry mechanisms for failed message sending attempts and multiple messaging all designed to make SMS handling in your projects smoother and more efficient.</p> <p>One of the key features of this package is the ability to configure custom drivers. This allows developers to easily implement their own drivers if they need to work with specific SMS providers or internal solutions. This flexibility ensures that SMSRocket can adapt to any SMS provider and be tailored to the specific needs of your project.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multi-driver support: Easily switch between different SMS providers.</li> <li>Caching: Caches SMS responses to reduce redundant requests.</li> <li>Logging: Logs SMS sending operations for easy debugging and monitoring.</li> <li>Retry Mechanism: Automatically retries failed message sending attempts.</li> <li>Multiple Messaging: Supports sending SMS to multiple recipients at once.</li> <li>User Integration: Automatically detects the phone number field from <code>User</code> models (integration with CodeIgniter Shield).</li> <li>Data History: Maintains a complete history of SMS transactions in the database for future reference and analysis.</li> <li>Sensitive Data Handling: Provides functionality to obfuscate sensitive information before storing it in the database to enhance security and privacy.</li> </ul>"},{"location":"#customization-flexibility","title":"Customization &amp; Flexibility","text":"<ul> <li> <p>Custom Drivers: If the existing drivers do not meet your needs, you can easily add new SMS drivers by implementing the <code>SMSDriverInterface</code>. This allows you to integrate any SMS provider, either through APIs or other mechanisms, offering complete control over how messages are sent.</p> </li> <li> <p>Configurable Drivers: Each driver can be customized individually with its own set of configuration options, allowing you to fine-tune settings like API keys, default senders, and availability of the drivers for specific environments (e.g., production vs. testing).</p> </li> <li> <p>Integration with Existing Systems: The package is designed to be highly modular and easy to integrate with other packages or libraries in CodeIgniter. Whether you need to integrate SMS functionality into a larger notification system or an e-commerce platform, SMSRocket can be extended and customized as needed.</p> </li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For a comprehensive overview of the package, including setup, configuration, usage examples, and advanced features, please refer to the official documentation. All essential details are covered to help you get started smoothly.</p> <p>Explore the documentation here.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install the package via Composer, run:</p> <pre><code>composer require datamweb/sms-rocket</code></pre> <p>For more information, please refer to installation.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>I believe that the CodeIgniter4 framework has not received the attention it deserves from the developer community. Therefore, it is up to all of us to contribute and build a strong and useful community around this framework. One effective way to do this is by submitting Pull Requests to add SMS drivers from different countries, helping to improve and expand SMSRocket. By doing so, we can turn this package into a comprehensive and valuable tool for all users and strengthen the CodeIgniter4 ecosystem along the way.</p> <p>Every open-source project depends on its contributors to be a success. The following users have contributed in one manner or another in making CodeIgniter4 SMSRocket:</p> <p> </p> <p>Made with contrib.rocks.</p>"},{"location":"create_custom_driver/","title":"Creating a Custom SMS Driver for SMSRocket","text":"<p>SMSRocket is designed to be flexible and extensible, allowing you to create your own SMS drivers tailored to your specific needs. This guide will walk you through the steps to create a custom SMS driver.</p>"},{"location":"create_custom_driver/#define-the-driver-interface","title":"Define the Driver Interface","text":"<p>All SMS drivers must implement the <code>Datamweb\\SMSRocket\\Drivers\\SMSDriverInterface</code>. This interface ensures that your driver adheres to the required structure for sending SMS messages and handling responses.</p>"},{"location":"create_custom_driver/#example-interface-definition","title":"Example Interface Definition","text":"<pre><code>namespace Datamweb\\SMSRocket\\Drivers;\n\ninterface SMSDriverInterface\n{\n    public function send(string $recipient, string $message, string $sender): string;\n    public function getDeliveryStatus(string $messageId): string;\n    public function getCreditBalance(): float|int;\n    public function sendPatterned(string $recipient, string $patternCode, array $patternValues): string;\n}</code></pre>"},{"location":"create_custom_driver/#create-your-custom-driver-class","title":"Create Your Custom Driver Class","text":"<p>Now, create your custom driver class implementing the <code>Datamweb\\SMSRocket\\Drivers\\SMSDriverInterface</code>. You can place this class in the <code>Drivers</code> directory of App\\SMSRocket\\Drivers.</p>"},{"location":"create_custom_driver/#example-custom-driver","title":"Example Custom Driver","text":"<pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\n/**\n * This file is part of CodeIgniter SMSRocket.\n *\n * (c) Pooya Parsa Dadashi &lt;admin@codeigniter4.ir&gt;\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace App\\SMSRocket\\Drivers;\n\nuse CodeIgniter\\HTTP\\CURLRequest;\nuse CodeIgniter\\I18n\\Time;\nuse Datamweb\\SMSRocket\\Enums\\CustomSMSDriver\\DeliveryStatus;\nuse Datamweb\\SMSRocket\\Exceptions\\SMSException;\nuse Datamweb\\SMSRocket\\Models\\SMSLogModel;\nuse Exception;\n\n/**\n * Class CustomSMSDriver\n *\n * A simple implementation of the SMSDriverInterface.\n * This class provides basic functionality to send SMS messages\n * and retrieve their statuses.\n */\nclass CustomSMSDriver implements SMSDriverInterface\n{\n    protected array $config;\n\n    /**\n     * Constructor for the ExampleDriver.\n     *\n     * Initializes the driver with the provided configuration.\n     *\n     * @param array $config Optional configuration settings for the driver.\n     *                      This can include API keys, sender information, etc.\n     */\n    public function __construct(array $config, protected SMSLogModel $model, protected CURLRequest $client)\n    {\n        // Initialize with config if necessary\n        $this-&gt;config = array_merge($config, ['driver_name' =&gt; self::class]);\n    }\n\n    /**\n     * Sends an SMS message to the specified recipient.\n     *\n     * @param string $recipient The phone number of the recipient.\n     * @param string $message   The content of the message to be sent.\n     *\n     * @return string A unique identifier for the sent message.\n     *                This ID can be used to track the status of the message.\n     *\n     * @throws Exception    If an HTTP request error occurs.\n     * @throws SMSException If the API returns an unsuccessful status or there is an error sending the SMS.\n     * @see api docs\n     */\n    public function send(string $recipient, string $message, string $sender): string\n    {\n\n        $baseUrl = 'https://...';\n\n        try {\n            // Send GET request\n            $response = $this-&gt;client-&gt;request('GET', $url, [\n                'http_errors' =&gt; false,\n            ]);\n            // Check if the response is successful\n            if ($response-&gt;getStatusCode() === 200) {\n                $responseData = json_decode((string) $response-&gt;getBody());\n                // Check response status and return MessageID\n                if (isset($responseData-&gt;Status) &amp;&amp; $responseData-&gt;Status === 'Success') {\n                    $messageId = (string) $responseData-&gt;Data[0]-&gt;MessageID;\n\n                    // DB Recording\n                    $this-&gt;model-&gt;logSMS(self::class, $messageId, $recipient, 100, $message, null, $sender);\n\n                    return $messageId;\n                }\n\n                throw SMSException::forUnsuccessfulAPIStatus();\n            }\n\n            throw SMSException::forFailedAPIResponse();\n        } catch (Exception $e) {\n            // Log the error and throw an exception\n            log_message('error', $e-&gt;getMessage());\n\n            throw SMSException::forErrorSendingSimpleSMS($e-&gt;getMessage());\n        }\n    }\n\n    /**\n     * Retrieves the delivery status from the AmootSMS.com API.\n     *\n     * @param string $messageId The ID of the message for which to retrieve the delivery status.\n     *\n     * @return string Returns the delivery status. If an error occurs, it returns an error message.\n     *\n     * @throws Exception    If an HTTP request error occurs.\n     * @throws SMSException If the API returns an unsuccessful status or there is an error retrieving the delivery status.\n     *\n     * @see api docss\n     */\n    public function getDeliveryStatus(string $messageId): string\n    {\n\n        // Build URL using http_build_query\n        $url = 'https://....';\n\n        try {\n            // Send GET request\n            $response = $this-&gt;client-&gt;request('GET', $url, [\n                'http_errors' =&gt; false,\n            ]);\n\n            // Check response status\n            if ($response-&gt;getStatusCode() === 200) {\n                $responseData = json_decode((string) $response-&gt;getBody());\n\n                // Check response status and return delivery status\n                if (isset($responseData-&gt;Status) &amp;&amp; $responseData-&gt;Status === 'Success') {\n                    $deliveryStatus = $responseData-&gt;Data-&gt;DeliveryType;\n\n                    $this-&gt;model-&gt;updateStatus($messageId, $deliveryStatus);\n\n                    return DeliveryStatus::getTitleFromCode($deliveryStatus);\n                }\n\n                throw SMSException::forUnsuccessfulAPIStatus();\n            }\n\n            throw SMSException::forFailedAPIResponse();\n        } catch (Exception $e) {\n            // Log the error and throw an exception\n            log_message('error', $e-&gt;getMessage());\n\n            throw SMSException::forFailedDeliveryStatus($e-&gt;getMessage());\n        }\n    }\n\n    /**\n     * Sends a patterned SMS message to the specified recipient.\n     *\n     * @param string $recipient     The phone number of the recipient.\n     * @param string $patternCode   The pattern code for the SMS.\n     * @param array  $patternValues The values to replace in the pattern.\n     *\n     * @return string A unique identifier for the sent message.\n     *\n     * @throws Exception    If an HTTP request error occurs.\n     * @throws SMSException If the API returns an unsuccessful status or there is an error sending the SMS.\n     * @see api docs\n     */\n    public function sendPatterned(string $recipient, string $patternCode, array $patternValues): string\n    {\n\n        $url = 'https://...';\n\n        try {\n            // Send GET request\n            $response = $this-&gt;client-&gt;request('GET', $url, [\n                'http_errors' =&gt; false,\n            ]);\n            // Check if the response is successful\n            if ($response-&gt;getStatusCode() === 200) {\n                $responseData = json_decode((string) $response-&gt;getBody());\n\n                // Verify the status of the response and return the result\n                if (isset($responseData-&gt;Status) &amp;&amp; $responseData-&gt;Status === 'Success') {\n                    $messageId = (string) $responseData-&gt;Data[0]-&gt;MessageID;\n\n                    // DB Record\n                    $this-&gt;model-&gt;logSMS(self::class, $messageId, $recipient, 100, null, $patternCode, null);\n\n                    return $messageId;\n                }\n\n                throw SMSException::forUnsuccessfulAPIStatus();\n            }\n\n            throw SMSException::forFailedAPIResponse();\n        } catch (Exception $e) {\n            // Log the error and throw an exception\n            log_message('error', $e-&gt;getMessage());\n\n            throw SMSException::forErrorSendingPatternedSMS($e-&gt;getMessage());\n        }\n    }\n\n    /**\n     * Retrieves the SMS credit balance from the AmootSms.com API.\n     *\n     * @return float|int Returns the credit balance as a float or int. If an error occurs, it returns 0.\n     *\n     * @throws Exception    If an HTTP request error occurs.\n     * @throws SMSException If the API returns an unsuccessful status or there is an error retrieving the credit balance.\n     * @see api docs\n     */\n    public function getCreditBalance(): float|int\n    {\n\n        // Build URL\n        $url = 'https://...';\n\n        try {\n            // Send request to the API\n            $response = $this-&gt;client-&gt;request('GET', $url, [\n                'http_errors' =&gt; false,\n            ]);\n\n            // Check if the response is successful\n            if ($response-&gt;getStatusCode() === 200) {\n                $responseData = json_decode((string) $response-&gt;getBody());\n\n                // Verify the status of the response and return the credit balance\n                if (isset($responseData-&gt;Status) &amp;&amp; $responseData-&gt;Status === 'Success') {\n                    return $responseData-&gt;RemaindCredit ?? 0;  // Default to 0 if data is missing\n                }\n\n                throw SMSException::forUnsuccessfulAPIStatus();\n            }\n\n            throw SMSException::forFailedAPIResponse();\n        } catch (Exception $e) {\n            // Log the exception and rethrow it\n            log_message('error', $e-&gt;getMessage());\n\n            throw SMSException::forErrorRetrievingCreditBalance($e-&gt;getMessage());\n        }\n    }\n}</code></pre>"},{"location":"create_custom_driver/#register-your-custom-driver","title":"Register Your Custom Driver","text":"<p>After creating your custom driver, you need to register it in the App\\Config\\SMSRocketConfig.php so it can be used within the service.</p>"},{"location":"create_custom_driver/#example-configuration","title":"Example Configuration","text":"<p>In your confing file (App\\Config\\SMSRocketConfig.php), add your custom driver:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse App\\SMSRocket\\Drivers\\CustomSMSDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;drivers['custom'] = [\n            'class' =&gt; CustomSMSDriver::class,\n            'config' =&gt; [\n                'api_key'       =&gt; env('CUSTOM_SMS_DRIVER_API_KEY', 'your-api-key'),\n                'defaultSender' =&gt; env('CUSTOM_SMS_DRIVER_SMS_SENDER', '3000XXXX'),\n                'isAvailable'   =&gt; true,\n            ],\n        ];\n        // ... other drivers ...\n    }\n}\n</code></pre>"},{"location":"create_custom_driver/#use-your-custom-driver","title":"Use Your Custom Driver","text":"<p>Now that your custom driver is registered, you can use it just like any other driver in the smsRocket service.</p>"},{"location":"create_custom_driver/#example-usage","title":"Example Usage","text":"<pre><code>&lt;?php\n\nuse Datamweb\\SMSRocket\\Services\\SMSRocketService;\n\n/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n// Send an SMS using the custom driver\n$response = $smsService-&gt;driver('custom')-&gt;setSender('YourSenderID')-&gt;setMessage('Hello, Custom World!')-&gt;send('1234567890');\n\nif ($response-&gt;isOK()) {\n    echo \"SMS sent successfully with Message ID: \" . $response-&gt;getMessage();\n} else {\n    echo \"Failed to send SMS: \" . $response-&gt;getMessage();\n}</code></pre> <p>Congratulations! You have successfully created a custom SMS driver for SMSRocket. This allows you to integrate any SMS service provider of your choice into your application.</p>"},{"location":"getting_started/","title":"Getting Started with SMSRocket","text":"<p>Welcome to CodeIgniter4 SMSRocket! This guide will help you start using the SMSRocket package in your CodeIgniter 4 project.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>A CodeIgniter 4 project set up and running.</li> <li>PHP version 8.1 and above</li> </ul>"},{"location":"getting_started/#configuration","title":"Configuration","text":"<p>If you're using the .env file for setting up your SMS drivers, you can skip this step. However, if you'd prefer to manage your SMS drivers manually in a configuration file, you should create the following file at app/Config/SMSRocketConfig.php with the structure below:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse App\\SMSRocket\\Drivers\\CustomSMSDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    // ... other ...\n    public bool $enableDBLogging = true;\n\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        // Register the custom SMS driver\n        $this-&gt;drivers['custom'] = [\n            'class' =&gt; CustomSMSDriver::class,\n            'config' =&gt; [\n                'api_key'       =&gt; env('CUSTOM_SMS_DRIVER_API_KEY', 'your-api-key'),\n                'defaultSender' =&gt; env('CUSTOM_SMS_DRIVER_SMS_SENDER', '3000XXXX'),\n                'isAvailable'   =&gt; true,\n            ],\n        ];\n\n        // ... other drivers ...\n    }\n}</code></pre> <p>This configuration allows you to define custom drivers and load environment variables. If you're using the .env file, it's not necessary to create this file unless you need custom logic for drivers.</p>"},{"location":"getting_started/#database-migration","title":"Database Migration","text":"<p>Since SMSRocket stores SMS history in the database, you need to run the migration to create the required table. </p> <p>Execute the following command to run the migration:  </p> <pre><code>php spark migrate -n Datamweb\\SMSRocket</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":""},{"location":"getting_started/#sending-sms","title":"Sending SMS","text":"<p>To send an SMS, use the <code>smsRocket</code> Service:</p> <pre><code>use Datamweb\\SMSRocket\\Services\\SMSRocketService;\n\n\n/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n// Set driver\n$response = $smsService-&gt;driver('twilio')\n\n// Set sender and message\n-&gt;setSender('YourSenderID')-&gt;setMessage('Hello, World!')\n\n// Send SMS to a single recipient\n-&gt;send('+1234567890');\n// $response = $smsService-&gt;setReceiver('+1234567890')-&gt;send();\n\n// Check response\nif ($response-&gt;isOK()) {\n     echo \"Your SMS request has been successfully sent to the provider. {$response-&gt;getMessageId()}\"; \n} else {\n    echo \"Failed to send SMS: \" . $response-&gt;getMessage();\n}</code></pre> <p>Note on Default Driver Configuration</p> <p>To simplify SMS sending, you can set a default driver in the configuration file. Open Config/SMSRocketConfig.php and set:  </p> <pre><code>public string $defaultDriver = 'twilio';  </code></pre> <p>With this setting, you can send SMS without calling <code>driver()</code> explicitly:  </p> <pre><code>$response = $smsService  \n    -&gt;setSender('YourSenderID')  \n    -&gt;setMessage('Hello, Default World!')  \n    -&gt;send('1234567890');  </code></pre> <p>If needed, you can still override the default driver by using:  </p> <pre><code>$response = $smsService-&gt;driver('custom')-&gt;send('1234567890');  </code></pre> <p>This setup improves code clarity while maintaining flexibility for different providers.</p>"},{"location":"getting_started/#sending-to-multiple-recipients","title":"Sending to Multiple Recipients","text":"<p>You can also send SMS to multiple recipients:</p> <pre><code>$responses = $smsService-&gt;send(['1234567890', '0987654321'], 'Hello, World!');\n\n// Process responses\nforeach ($responses as $number =&gt; $response) {\n    echo \"Response for {$number}: \" . $response-&gt;getMessage() . PHP_EOL;\n}</code></pre> <p>NOT Intended for Bulk SMS</p> <p>This method is not intended for bulk SMS sending. In fact, it sends a separate request to the provider for each recipient number. Therefore, we do not recommend using this approach for sending a large volume of messages, as it may lead to hitting rate limits imposed by the provider.</p>"},{"location":"installation/","title":"Installation SMSRocket","text":"<p>You can install the SMSRocket package in your CodeIgniter 4 project using either Composer or manual installation. Using Composer is the recommended way to install SMSRocket as it simplifies dependency management and package updates. However, if you have any issues with Composer, the manual installation method allows you to use the package as well.</p> With ComposerManual Installation <p>Using Composer is the easiest and fastest way to install the package. Follow these steps:</p> <ol> <li> <p>Open Terminal or Command Prompt:   Open your terminal or Command Prompt and navigate to your CodeIgniter 4 project directory.</p> </li> <li> <p>Run the Installation Command:   Execute the following command to install the SMSRocket package:</p> <pre><code>composer require datamweb/sms-rocket</code></pre> <p>Composer will download the package and add it to your project.</p> </li> <li> <p>Update Configuration (Optional):      After installation, the package files will be placed in the <code>vendor/</code> directory and will be automatically loaded by Composer. You may need to update your project configuration files as necessary.</p> </li> </ol> <p>If you cannot use Composer or prefer to install the package manually, follow these steps:</p> <ol> <li> <p>Download the Package   First, download the SMSRocket package manually.</p> <ul> <li>Visit the package\u2019s GitHub repository and download the latest version.</li> <li>Alternatively, if you have the ZIP file of the package, copy it to your project directory.</li> </ul> </li> <li> <p>Extract Files   Extract the ZIP file and place the contents in an appropriate directory. For example, you can copy it to <code>APPPATH . 'ThirdParty\\sms-rocket\\src'</code>.</p> </li> <li> <p>Update Autoloader   To ensure the package is automatically loaded in your project, update the Autoloader configuration. Go to <code>app/Config/Autoload.php</code> and add the package namespace and path:</p> <pre><code>$psr4 = [\n    'App'         =&gt; APPPATH,\n    'Datamweb\\\\SMSRocket' =&gt;  APPPATH . 'ThirdParty\\sms-rocket\\src'\n];</code></pre> </li> <li> <p>Configure the Package   After adding the package, make sure to configure the necessary settings for SMSRocket (like setting up API Key and ...).</p> </li> </ol>"},{"location":"admin/auto_update_copyright/","title":"Setup Guide for Automatic Copyright Year Update","text":""},{"location":"admin/auto_update_copyright/#introduction","title":"Introduction","text":"<p>This documentation is specifically for Code Maintainers and explains how to set up automatic GPG-signed commits in GitHub Actions, as well as configuring a Personal Access Token (PAT2). The goal is to ensure that automated commits, such as those updating the copyright year, are securely signed with GPG and pushed using a valid PAT2 for authentication. This document is not intended for developers or consumers but for maintainers handling automated processes.</p>"},{"location":"admin/auto_update_copyright/#steps-to-set-up-gpg-for-automatic-commit-signing","title":"Steps to Set Up GPG for Automatic Commit Signing","text":""},{"location":"admin/auto_update_copyright/#1-creating-a-gpg-key","title":"1. Creating a GPG Key","text":"<p>First, generate a GPG key that will be used to sign your automated commits.</p> <ol> <li> <p>Generate a new GPG key:    Run the following command in your terminal:</p> <pre><code>gpg --full-generate-key</code></pre> <p>Follow the prompts to create your key. It\u2019s recommended to use RSA with a key size of at least 4096 bits.</p> </li> <li> <p>Export your public key:    After generating your key(key does not expire), export your public GPG key using:</p> <pre><code>gpg --armor --export YOUR_KEY_ID</code></pre> </li> </ol> <p>Replace <code>YOUR_KEY_ID</code> with the actual ID of your key, which you can get from <code>gpg --list-keys</code>.</p>"},{"location":"admin/auto_update_copyright/#2-adding-the-gpg-key-to-your-github-account","title":"2. Adding the GPG Key to Your GitHub Account","text":"<p>To allow GitHub to recognize your signed commits, add your public GPG key to your GitHub account.</p> <ol> <li>Go to your GitHub GPG Keys settings.</li> <li>Click on New GPG Key.</li> <li>Paste your public GPG key and save it.</li> </ol>"},{"location":"admin/auto_update_copyright/#3-storing-your-gpg-key-in-github-secrets","title":"3. Storing Your GPG Key in GitHub Secrets","text":"<p>Next, you\u2019ll need to store your private GPG key as a secret in GitHub to allow signing in GitHub Actions.</p> <ol> <li> <p>Export your private key:    Run this command to export your private GPG key:</p> <pre><code>gpg --armor --export-secret-keys YOUR_KEY_ID</code></pre> </li> <li> <p>Store the private key in GitHub Secrets:</p> <ul> <li>Go to your repository\u2019s Settings.</li> <li>Navigate to Secrets and variables \u2192 Actions.</li> <li>Add a new secret named <code>GPG_PRIVATE_KEY</code> and paste the private key.</li> </ul> </li> </ol>"},{"location":"admin/auto_update_copyright/#4-setting-up-a-passphrase-for-gpg-key-in-github-actions","title":"4. Setting Up a Passphrase for GPG Key in GitHub Actions","text":"<p>If your GPG key is protected by a passphrase, you will also need to securely provide this passphrase to GitHub Actions. Here\u2019s how to do it:</p> <ol> <li> <p>Exporting Your GPG Key with a Passphrase</p> <p>When generating your GPG key, you might have set a passphrase to add an extra layer of security. To automate the commit signing process, you need to store this passphrase securely in GitHub Secrets.</p> </li> <li> <p>Storing the Passphrase in GitHub Secrets</p> <ol> <li> <p>Find your passphrase:      When you created your GPG key, you set a passphrase. Ensure you remember it or have it stored securely.</p> </li> <li> <p>Add the passphrase to GitHub Secrets:</p> <ul> <li>Go to your repository\u2019s Settings.</li> <li>Navigate to Secrets and variables \u2192 Actions.</li> <li>Add a new secret named <code>PASSPHRASE</code> and store your passphrase there.</li> </ul> </li> </ol> </li> </ol> <p>Note</p> <ul> <li>Security: Never expose your private GPG key or PAT2 in your repository. Always use GitHub Secrets to store sensitive information securely.</li> <li>Token Expiration: PATs can expire or be revoked. Ensure that your PAT is valid and rotate tokens as necessary.</li> <li>Testing: Before applying these changes to your main repository, test them in a separate environment to ensure everything works correctly.</li> </ul>"},{"location":"drivers/amootsms/","title":"AmootSMS","text":"<p>The AmootSMS driver allows you to send SMS through the amootsms service. This driver provides functionality for sending simple SMS, tracking delivery status, get credit balance, and sending Patterned SMS.</p>"},{"location":"drivers/amootsms/#configuration","title":"Configuration","text":"<p>To use the <code>AmootSMS</code> driver, you need to configure your settings properly. You can set these configuration values in two ways: through the .env file or the App\\Config\\SMSRocketConfig.php config file.</p> .envConfig\\SMSRocketConfig.php <p>The .env file is the primary way to configure sensitive information such as API keys and other settings. This file should be located in the root of your CodeIgniter4 project.</p> <pre><code># https://portal.amootsms.com/client/APIToken\nAMOOTSMS_SMS_API_KEY = Your API key \nAMOOTSMS_SMS_SENDER = public</code></pre> <p>Alternatively, you can set your configuration directly in the SMSRocketConfig.php file located in the app/Config directory of your CodeIgniter4 project. This method is suitable for non-sensitive configurations.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse Datamweb\\SMSRocket\\Drivers\\AmootsmsDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;drivers['custom'] = [\n            'class'  =&gt; AmootsmsDriver::class,\n            'config' =&gt; [\n                // https://portal.amootsms.com/client/APIToken\n                'token'         =&gt; env('AMOOTSMS_SMS_API_KEY', 'Enter your Amootsms.com token here'), \n                'defaultSender' =&gt; env('AMOOTSMS_SMS_SENDER', 'public'),\n                'isAvailable'   =&gt; true,\n            ],\n        ];\n        // ... other drivers ...\n    }\n}</code></pre> <p>Choosing Between .env and SMSRocketConfig.php</p> <p>It is recommended to use the .env file for sensitive information to keep it secure and separate from the codebase. Use the SMSRocketConfig.php file for general configurations that are not sensitive and can be hardcoded into the application.</p>"},{"location":"drivers/amootsms/#usage-example","title":"Usage Example","text":""},{"location":"drivers/amootsms/#sending-a-simple-sms","title":"Sending a Simple SMS:","text":"<p>To send a simple SMS using the send method:</p> <pre><code>/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n$amootsms = $smsService-&gt;driver('amootsms')\n\n-&gt;setSender('public')\n-&gt;setReceiver('09118840000')\n-&gt;setMessage('Ticket #20 has been created.')\n-&gt;send();</code></pre>"},{"location":"drivers/amootsms/#tracking-delivery-status","title":"Tracking Delivery Status:","text":"<p>You can track the delivery status of a sent SMS using the <code>getDeliveryStatus()</code> method:</p> <pre><code>\n$message_id = $amootsms-&gt;getMessageId();\n\n$status = $smsService-&gt;getDeliveryStatus($message_id);\necho $status; // Outputs the delivery status</code></pre>"},{"location":"drivers/amootsms/#sending-a-patterned-sms","title":"Sending a Patterned SMS","text":"<p>In modern communication, sending SMS messages with specific patterns can greatly enhance user engagement and response rates. The SMSRocket package provides a convenient method for sending patterned SMS, allowing developers to customize their messages based on predefined templates. This capability is particularly useful for notifications, alerts, and promotional messages where specific formatting is required.</p> <p>To send an SMS with a specific pattern, you can utilize the sendPatterned method provided by the SMSRocket service. This method enables you to specify a pattern code that corresponds to a template defined in your SMS provider's system. Additionally, you can pass any necessary data that the template requires. Here\u2019s how to implement it in your code:</p> <pre><code>$amootsms= $smsService-&gt;driver('amootsms')\n-&gt;setPattern('2218') // Set the pattern code to identify the template// Set the pattern code to identify the template\n-&gt;setPatternData([ // Provide the necessary data for the pattern\n    'opt_code'=&gt; '1245',\n])\n-&gt;send('09118840000');\n\nif($amootsms-&gt;isOK()){\n    echo \"Your SMS request has been successfully sent to the AmootSms provider. {$amootsms-&gt;getMessageId()}\";    \n}</code></pre>"},{"location":"drivers/amootsms/#checking-your-sms-credit-balance","title":"Checking Your SMS Credit Balance","text":"<p>To get the credit balance, you simply call the <code>getCredit()</code> method on the initialized driver object.</p> <pre><code>$balance = $smsService-&gt;driver('amootsms')\n            -&gt;getCredit();\necho \"Remaining credit: {$balance}\";</code></pre>"},{"location":"drivers/farazsms/","title":"FarazSMS","text":""},{"location":"drivers/farazsms/#farazsms-driver","title":"FarazSMS Driver","text":"<p>The <code>FarazSMS</code> driver allows you to send SMS through the farazsms.com service. This driver provides functionality for sending simple SMS, tracking delivery status, getting credit balance, and sending Patterned SMS.</p>"},{"location":"drivers/farazsms/#configuration","title":"Configuration","text":"<p>To use the farazsms driver, you need to configure your settings properly. You can set these configuration values in two ways: through the .env file or the Config\\SMSRocketConfig.php config file.</p> .envConfig\\SMSRocketConfig.php <p>The <code>.env</code> file is the primary way to configure sensitive information such as API keys and other settings. This file should be located in the root of your CodeIgniter4 project.</p> <pre><code>FARAZSMS_DRIVER_API_KEY = Your API key from https://panel.farazsms.com/client/APIToken</code></pre> <p>Alternatively, you can set your configuration directly in the SMSRocketConfig.php file located in the app/Config directory of your CodeIgniter4 project. This method is suitable for non-sensitive configurations.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse Datamweb\\SMSRocket\\Drivers\\FarazSMSDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;drivers['farazsms'] = [\n            'class' =&gt; FarazSMSDriver::class,\n            'config' =&gt; [\n                'api_key'       =&gt; env('FARAZSMS_SMS_API_KEY', 'your-api-key'),\n                'defaultSender' =&gt; env('FARAZSMS_SMS_SENDER', '5000XXXX'),\n                'isAvailable'   =&gt; true,\n            ],\n        ];\n        // ... other drivers ...\n    }\n}</code></pre> <p>Choosing Between .env and SMSRocketConfig.php</p> <p>It is recommended to use the .env file for sensitive information to keep it secure and separate from the codebase. Use the SMSRocketConfig.php file for general configurations that are not sensitive and can be hardcoded into the application.</p>"},{"location":"drivers/farazsms/#usage-example","title":"Usage Example","text":""},{"location":"drivers/farazsms/#sending-a-simple-sms","title":"Sending a Simple SMS:","text":"<p>To send a simple SMS using the send method:</p> <pre><code>/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n$farazsms = $smsService-&gt;driver('farazsms')\n    -&gt;setSender('500041XXXXX')\n    -&gt;setReceiver('09123450000')\n    -&gt;setMessage('Your order has been confirmed.')\n    -&gt;send();</code></pre>"},{"location":"drivers/farazsms/#tracking-delivery-status","title":"Tracking Delivery Status:","text":"<p>You can track the delivery status of a sent SMS using the <code>getDeliveryStatus()</code> method:</p> <pre><code>$message_id = $farazsms-&gt;getMessageId();\n\n$status = $smsService-&gt;getDeliveryStatus($message_id);\necho $status; // Outputs the delivery status</code></pre>"},{"location":"drivers/farazsms/#sending-a-patterned-sms","title":"Sending a Patterned SMS","text":"<p>To send an SMS with a specific pattern, you can use the <code>sendPatterned()</code> method provided by the SMSRocket service. This allows you to send predefined template-based SMS with custom data.</p> <pre><code>$farazsms = $smsService-&gt;driver('farazsms')\n    -&gt;setPattern('3021') // Set the pattern code\n    -&gt;setPatternData([    // Provide the necessary data for the pattern\n        'order_code' =&gt; '1234',\n    ])\n    -&gt;send('09123456789');\n\nif($farazsms-&gt;isOK()){\n    echo \"Your patterned SMS was successfully sent. Message ID: {$farazsms-&gt;getMessageId()}\";\n}</code></pre>"},{"location":"drivers/farazsms/#checking-your-sms-credit-balance","title":"Checking Your SMS Credit Balance","text":"<p>To get the credit balance, call the <code>getCredit()</code> method on the initialized driver object:</p> <pre><code>$balance = $smsService-&gt;driver('farazsms')-&gt;getCredit();\necho \"Remaining credit: {$balance}\";</code></pre>"},{"location":"drivers/idehpardazan/","title":"IdehpardazanDriver(SMS.ir)","text":""},{"location":"drivers/idehpardazan/#idapardaz-driver","title":"IDApardaz Driver","text":"<p>The Idehpardazan driver allows you to send SMS through the amootsms service. This driver provides functionality for sending simple SMS, tracking delivery status, getting credit balance, and sending Patterned SMS.</p>"},{"location":"drivers/idehpardazan/#configuration","title":"Configuration","text":"<p>To use the Idehpardazan driver, you need to configure your settings properly. You can set these configuration values in two ways: through the .env file or the App\\Config\\SMSRocketConfig.php config file.</p> .envConfig\\SMSRocketConfig.php <p>The <code>.env</code> file is the primary way to configure sensitive information such as API keys and other settings. This file should be located in the root of your CodeIgniter4 project.</p> <pre><code># https://panel.idapardaz.com/client/APIToken\nSMSIR_SMS_API_KEY = Your API key\nSMSIR_SMS_SENDER = </code></pre> <p>Alternatively, you can set your configuration directly in the SMSRocketConfig.php file located in the app/Config directory of your CodeIgniter4 project. This method is suitable for non-sensitive configurations.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse Datamweb\\SMSRocket\\Drivers\\IdehpardazanDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;drivers['smsir'] = [\n            'class'  =&gt; IdehpardazanDriver::class,\n            'config' =&gt; [\n                'api_key'       =&gt; env('SMSIR_SMS_API_KEY', 'Enter your sms.ir api key here'),\n                'defaultSender' =&gt; env('SMSIR_SMS_SENDER', '3000XXXXX'),\n                'isAvailable'   =&gt; true,\n            ],\n        ];\n        // ... other drivers ...\n    }\n}</code></pre> <p>Choosing Between .env and SMSRocketConfig.php</p> <p>It is recommended to use the .env file for sensitive information to keep it secure and separate from the codebase. Use the SMSRocketConfig.php file for general configurations that are not sensitive and can be hardcoded into the application.</p>"},{"location":"drivers/idehpardazan/#usage-example","title":"Usage Example","text":""},{"location":"drivers/idehpardazan/#sending-a-simple-sms","title":"Sending a Simple SMS:","text":"<p>To send a simple SMS using the send method:</p> <pre><code>/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n$smsir = $smsService-&gt;driver('smsir')\n    -&gt;setSender('public')\n    -&gt;setReceiver('09123456789')\n    -&gt;setMessage('Your appointment is confirmed.')\n    -&gt;send();</code></pre>"},{"location":"drivers/idehpardazan/#tracking-delivery-status","title":"Tracking Delivery Status:","text":"<p>You can track the delivery status of a sent SMS using the <code>getDeliveryStatus()</code> method:</p> <pre><code>$message_id = $smsir-&gt;getMessageId();\n\n$status = $smsService-&gt;getDeliveryStatus($message_id);\necho $status; // Outputs the delivery status</code></pre>"},{"location":"drivers/idehpardazan/#sending-a-patterned-sms","title":"Sending a Patterned SMS","text":"<p>To send an SMS with a specific pattern, you can use the <code>sendPatterned()</code> method provided by the SMSRocket service. This allows you to send predefined template-based SMS with custom data.</p> <pre><code>$smsir = $smsService-&gt;driver('smsir')\n    -&gt;setPattern('5023') // Set the pattern code\n    -&gt;setPatternData([    // Provide the necessary data for the pattern\n        'verification_code' =&gt; '5678',\n    ])\n    -&gt;send('09123456789');\n\nif($smsir-&gt;isOK()){\n    echo \"Your patterned SMS was successfully sent. Message ID: {$idapardaz-&gt;getMessageId()}\";\n}</code></pre>"},{"location":"drivers/idehpardazan/#checking-your-sms-credit-balance","title":"Checking Your SMS Credit Balance","text":"<p>To get the credit balance, call the <code>getCredit()</code> method on the initialized driver object:</p> <pre><code>$balance = $smsService-&gt;driver('smsir')-&gt;getCredit();\necho \"Remaining credit: {$balance}\";</code></pre>"},{"location":"drivers/supported_drivers/","title":"Supported Drivers","text":"<p>The CodeIgniter 4 SMSRocket package supports the following SMS drivers, allowing you to choose the one that best fits your project requirements. Below is a list of the supported drivers along with their testing status.</p> Driver Description Site Status Twilio A popular cloud communication platform for SMS. www.twilio.com \ud83d\udd04 In Progress Amootsms A leading Iranian SMS platform with versatile APIs. www.amootsms.com \u2705 Tested FarazSMS A leading Iranian SMS platform with versatile APIs. www.farazsms.com \u2705 Tested Idehpardazan A leading Iranian SMS platform with versatile APIs. www.sms.ir \u2705 Tested Custom Driver Allows for integration of custom SMS providers. --- \u2705 Tested <p>Testing Status</p> <ul> <li>\u2705 Tested: The driver has been thoroughly tested and is functioning as expected.</li> <li>\ud83d\udd04 In Progress: The driver has been created based on the provider\u2019s technical documentation but has not yet been tested in a live environment.</li> </ul>"},{"location":"drivers/supported_drivers/#how-to-add-a-new-driver","title":"How to Add a New Driver","text":"<p>In addition to the list of supported drivers above, SMSRocket allows you to create a custom driver for any SMS provider. This flexibility lets you integrate with virtually any SMS service that meets your needs.</p> <p>To add a new custom driver, please refer to this guide for detailed instructions.</p>"},{"location":"drivers/twilio/","title":"Twilio","text":"<p>The <code>Twilio</code> driver allows you to send SMS through the twilio.com service. This driver provides functionality for sending simple SMS, tracking delivery status, get credit balance.</p>"},{"location":"drivers/twilio/#configuration","title":"Configuration","text":"<p>To use the <code>Twilio</code> driver, you need to configure your settings properly. You can set these configuration values in two ways: through the .env file or the App\\Config\\SMSRocketConfig.php config file.</p> .envConfig\\SMSRocketConfig.php <p>The <code>.env</code> file is the primary way to configure sensitive information such as API keys and other settings. This file should be located in the root of your CodeIgniter4 project.</p> <pre><code># https://console.twilio.com/us1/account/keys-credentials/api-keys\nTWILIO_SMS_ACCOUNT_SID =\nTWILIO_SMS_AUTH_TOKEN =\nTWILIO_SMS_SENDER =\nTWILIO_SMS_MESSAGING_SERVICE_SID =</code></pre> <p>Alternatively, you can set your configuration directly in the SMSRocketConfig.php file located in the app/Config directory of your CodeIgniter4 project. This method is suitable for non-sensitive configurations.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse Datamweb\\SMSRocket\\Config\\SMSRocketConfig as OriginalSMSRocketConfig;\nuse App\\SMSRocket\\Drivers\\CustomSMSDriver;\n\nclass SMSRocketConfig extends OriginalSMSRocketConfig\n{\n    /**\n     * Constructor for SMSRocketConfig to load environment variables.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;drivers['twilio'] = [\n            'class'  =&gt; TwilioDriver::class,\n            'config' =&gt; [\n                'AccountSID'          =&gt; env('TWILIO_SMS_ACCOUNT_SID', 'ACXXXXXX'), // https://console.twilio.com/us1/account/keys-credentials/api-keys\n                'AuthToken'           =&gt; env('TWILIO_SMS_AUTH_TOKEN', '961297XXXXX'),\n                'defaultSender'       =&gt; env('TWILIO_SMS_SENDER', '+120XXXXXX'),\n                'messagingServiceSid' =&gt; env('TWILIO_SMS_MESSAGING_SERVICE_SID', 'MGXXXXX'), //required if defaultSender(From) is not passed\n                'isAvailable'         =&gt; true,\n            ],\n        ];\n        // ... other drivers ...\n    }\n}</code></pre> <p>Choosing Between .env and SMSRocketConfig.php</p> <p>It is recommended to use the .env file for sensitive information to keep it secure and separate from the codebase. Use the SMSRocketConfig.php file for general configurations that are not sensitive and can be hardcoded into the application.</p>"},{"location":"drivers/twilio/#usage-example","title":"Usage Example","text":""},{"location":"drivers/twilio/#sending-a-simple-sms","title":"Sending a Simple SMS:","text":"<p>To send a simple SMS using the send method:</p> <pre><code>/** @var SMSRocketService $smsService */\n$smsService = service('smsRocket');\n\n$twilio = $smsService-&gt;driver('twilio')\n        -&gt;setSender('+120XXXXXX')\n        -&gt;setReceiver('+9809118840000')\n        -&gt;setMessage('Ticket #20 has been created.')\n        -&gt;send();</code></pre>"},{"location":"drivers/twilio/#tracking-delivery-status","title":"Tracking Delivery Status:","text":"<p>You can track the delivery status of a sent SMS using the <code>getDeliveryStatus()</code> method:</p> <pre><code>$message_id = $twilio-&gt;getMessageId();\n\n$status = $smsService-&gt;getDeliveryStatus($message_id);\necho $status; // Outputs the delivery status</code></pre>"},{"location":"drivers/twilio/#checking-your-sms-credit-balance","title":"Checking Your SMS Credit Balance","text":"<p>To get the credit balance, you simply call the <code>getCredit()</code> method on the initialized driver object.</p> <pre><code>$balance = $smsService-&gt;driver('twilio')-&gt;getCredit();\n\necho \"Remaining credit: {$balance}\";</code></pre>"}]}